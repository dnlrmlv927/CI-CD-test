import sys
sys.path.append(r'/home/danilssau6364/airflow')
from airflow import DAG
from airflow.operators.python import PythonOperator
from datetime import datetime, timedelta
import traceback
from modules.miner_currency import CurrencyMiner
from modules.db_worker import DBWorker


# üîπ –î–∞–Ω–Ω—ã–µ –¥–ª—è Telegram
TELEGRAM_BOT_TOKEN = Variable.get("TELEGRAM_BOT_TOKEN", default_var=None)
TELEGRAM_CHAT_ID = Variable.get("TELEGRAM_CHAT_ID", default_var=None)

# üîπ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–∫–∏ –≤ Telegram
def send_failure_alert(context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ —Ç–∞—Å–∫–∏."""
    dag_id = context['dag'].dag_id
    task_id = context['task_instance'].task_id
    execution_date = context['ds']
    error_message = str(context['exception'])  # <-- –î–æ–±–∞–≤–ª–µ–Ω `str()`, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏

    message = f"""
‚ùå *–û—à–∏–±–∫–∞ –≤ DAG:* `{dag_id}`
üìå *–¢–∞—Å–∫–∞:* `{task_id}`
üìÖ *–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:* `{execution_date}`
‚ö†Ô∏è *–û—à–∏–±–∫–∞:* `{error_message}`
    """

    if TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        requests.post(url, json={"chat_id": TELEGRAM_CHAT_ID, "text": message, "parse_mode": "Markdown"})

# üîπ –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ DAG
def send_success_alert(context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ DAG."""
    dag_id = context['dag'].dag_id
    run_id = context['run_id']
    execution_date = context['ds']

    message = f"""
‚úÖ *DAG –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ:* `{dag_id}`
üöÄ *Run ID:* `{run_id}`
üìÖ *–î–∞—Ç–∞:* `{execution_date}`
    """

    if TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        requests.post(url, json={"chat_id": TELEGRAM_CHAT_ID, "text": message, "parse_mode": "Markdown"})


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞—Ç
START_DATE = datetime(2025, 1, 1)  # –ù–∞—á–∞–ª–æ —Å 1 —è–Ω–≤–∞—Ä—è 2025
SCHEDULE_INTERVAL = '0 6 * * *'  # –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 6:00 —É—Ç—Ä–∞ (UTC)
DEFAULT_ARGS = {
    'owner': 'airflow',
    'depends_on_past': False,
    'start_date': START_DATE,
    'retries': 3,
    'retry_delay': timedelta(minutes=5),
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
miner = CurrencyMiner()
db = DBWorker()

# jinja
def mine_data(**kwargs):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞–π–Ω–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö —Å –≤–∞–ª—é—Ç–Ω–æ–≥–æ API."""
    execution_date = kwargs['ds']  # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∑–∞–ø—É—Å–∫–∞ DAG (YYYY-MM-DD)

    try:
        print(f"–ó–∞–ø—É—Å–∫ –º–∞–π–Ω–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ {execution_date}")
        data = miner.get_fiat_data(since=execution_date)
        db.write_to_postgresql(data)
        print(f"–î–∞–Ω–Ω—ã–µ –∑–∞ {execution_date} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –ë–î.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞–π–Ω–∏–Ω–≥–µ —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç –∑–∞ {execution_date}:")
        print(traceback.format_exc())


# –°–æ–∑–¥–∞–Ω–∏–µ DAG –≤—ã—Ñ
with DAG(
        'dag_fiat_mine_currency_data',
        default_args=DEFAULT_ARGS,
        schedule_interval=SCHEDULE_INTERVAL,
        catchup=True,
        tags=['currency', 'cbr', 'ecb'],
        dagrun_timeout=timedelta(minutes=60),
) as dag:
    task_mine_currency = PythonOperator(
        task_id='fiat_mine_currency_data',
        python_callable=mine_data,
        on_success_callback=send_success_alert,
        on_failure_callback=send_failure_alert
    )

    task_mine_currency  # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
